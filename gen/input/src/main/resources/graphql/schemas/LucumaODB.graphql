type AirMassRange {
  # Minimum Airmass (unitless)
  min: BigDecimal!

  # Maximum Airmass (unitless)
  max: BigDecimal!
}

# Collection of stars observed in a single observation
type Asterism {
  # Asterism ID
  id: AsterismId!

  # Whether the asterism is deleted or present
  existence: Existence!

  # Asterism name, if any.
  name: NonEmptyString

  # When set, overrides the default base position of the asterism
  explicitBase: Coordinates

  # All observations associated with the asterism.
  observations(
    # Program ID
    programId: ProgramId

    # Retrieve `first` values after the given cursor
    first: Int!

    # Retrieve values after the one associated with this cursor
    after: Cursor

    # Set to true to include deleted values
    includeDeleted: Boolean! = false
  ): ObservationConnection!

  # All asterism targets
  targets(
    # Retrieve `first` values after the given cursor
    first: Int!

    # Retrieve values after the one associated with this cursor
    after: Cursor

    # Set to true to include deleted values
    includeDeleted: Boolean! = false
  ): TargetConnection!

  # The programs associated with the asterism.
  programs(
    # Retrieve `first` values after the given cursor
    first: Int!

    # Retrieve values after the one associated with this cursor
    after: Cursor

    # Set to true to include deleted values
    includeDeleted: Boolean! = false
  ): ProgramConnection!
}

# Asterisms in the current page
type AsterismConnection {
  nodes: [Asterism!]!

  # Edges in the current page
  edges: [AsterismEdge!]!

  # Paging information
  pageInfo: PageInfo!
}

# An Asterism and its cursor
type AsterismEdge {
  # AsterismEdge element
  node: Asterism!

  # AsterismEdge element cursor
  cursor: Cursor!
}

# Event sent when a new object is created or updated
type AsterismEdit implements Event {
  # Type of edit
  editType: EditType!

  # Edited object
  value: Asterism!
  id: Long!
}

# AsterismId id formatted as `a-(0|[1-9a-f][0-9a-f]*)`
scalar AsterismId

# Asterism and the programs with which it is associated
input AsterismProgramLinks {
  asterismId: AsterismId!
  programIds: [ProgramId!]!
}

# Asterism and the targets with which it is associated
input AsterismTargetLinks {
  asterismId: AsterismId!
  targetIds: [TargetId!]!
}

# Bias calibration step
type Bias implements StepConfig {
  # Step type
  stepType: StepType!
}

# The `BigDecimal` scalar type represents signed fractional values with arbitrary precision.
scalar BigDecimal

# Stopping point in a series of steps
enum Breakpoint {
  # Breakpoint Enabled
  ENABLED

  # Breakpoint Disabled
  DISABLED
}

type CatalogId {
  # Catalog name option
  name: CatalogName!

  # Catalog id string
  id: String!
}

# Catalog id consisting of catalog name and string identifier
input CatalogIdInput {
  name: CatalogName!
  id: String!
}

# Catalog name values
enum CatalogName {
  # CatalogName Simbad
  SIMBAD

  # CatalogName Horizon
  HORIZON

  # CatalogName Gaia
  GAIA
}

# Cloud extinction
enum CloudExtinction {
  # CloudExtinction PointOne
  POINT_ONE

  # CloudExtinction PointThree
  POINT_THREE

  # CloudExtinction PointFive
  POINT_FIVE

  # CloudExtinction OnePointZero
  ONE_POINT_ZERO

  # CloudExtinction OnePointFive
  ONE_POINT_FIVE

  # CloudExtinction TwoPointZero
  TWO_POINT_ZERO

  # CloudExtinction ThreePointZero
  THREE_POINT_ZERO
}

# Instrument configuration
interface Config {
  # Instrument type
  instrument: InstrumentType!
}

type ConstraintSet {
  # Constraint set ID
  id: ConstraintSetId!

  # Deleted or Present
  existence: Existence!

  # The program that contains this constraint set
  program(
    # Set to true to include deleted values
    includeDeleted: Boolean! = false
  ): Program!

  # Constraint set name
  name: NonEmptyString!

  # Image quality
  imageQuality: ImageQuality!

  # Cloud extinction
  cloudExtinction: CloudExtinction!

  # Sky background
  skyBackground: SkyBackground!

  # Water vapor
  waterVapor: WaterVapor!

  # Either airmass range or elevation range
  elevationRange: ElevationRange!

  # Airmass range if elevation range is an Airmass range
  airmassRange: AirMassRange

  # Hour angle range if elevation range is an Hour angle range
  hourAngleRange: HourAngleRange

  # The observations associated with the constraint set
  observations(
    # Retrieve `first` values after the given cursor
    first: Int!

    # Retrieve values after the one associated with this cursor
    after: Cursor

    # Set to true to include deleted values
    includeDeleted: Boolean! = false
  ): ObservationConnection!
}

# Constraint Sets in the current page
type ConstraintSetConnection {
  nodes: [ConstraintSet!]!

  # Edges in the current page
  edges: [ContraintSetEdge!]!

  # Paging information
  pageInfo: PageInfo!
}

# Event sent when a new object is created or updated
type ConstraintSetEdit implements Event {
  # Type of edit
  editType: EditType!

  # Edited object
  value: ConstraintSet!
  id: Long!
}

# ConstraintSetId id formatted as `c-(0|[1-9a-f][0-9a-f]*)`
scalar ConstraintSetId

# ConstraintSet and the observations with which it is associated
input ConstraintSetObservationLinks {
  constraintSetId: ConstraintSetId!
  observationIds: [ObservationId!]!
}

# A Constraint Set and its cursor
type ContraintSetEdge {
  # ContraintSetEdge element
  node: ConstraintSet!

  # ContraintSetEdge element cursor
  cursor: Cursor!
}

type Coordinates {
  # Right Ascension
  ra: RightAscension!

  # Declination
  dec: Declination!
}

# Absolute coordinates relative base epoch
input CoordinatesInput {
  ra: RightAscensionInput!
  dec: DeclinationInput!
}

# Airmass range creation parameters
input CreateAirmassRangeInput {
  min: BigDecimal!
  max: BigDecimal!
}

# Asterism parameters
input CreateAsterismInput {
  asterismId: AsterismId
  name: NonEmptyString
  programIds: [ProgramId!]!
  explicitBase: CoordinatesInput
}

# Constraint set creation parameters
input CreateConstraintSetInput {
  constraintSetId: ConstraintSetId
  programId: ProgramId!
  name: NonEmptyString!
  imageQuality: ImageQuality!
  cloudExtinction: CloudExtinction!
  skyBackground: SkyBackground!
  waterVapor: WaterVapor!
  elevationRange: CreateElevationRangeInput!
}

# Elevation range creation parameters
input CreateElevationRangeInput {
  airmassRange: CreateAirmassRangeInput
  hourAngleRange: CreateHourAngleRangeInput
}

# Hour angle range creation parameters
input CreateHourAngleRangeInput {
  minHours: BigDecimal!
  maxHours: BigDecimal!
}

# Nonsidereal target parameters
input CreateNonsiderealInput {
  targetId: TargetId
  programIds: [ProgramId!]
  name: NonEmptyString!
  key: EphemerisKeyType!
  des: String!
  magnitudes: [MagnitudeInput!]
}

# Observation creation parameters
input CreateObservationInput {
  observationId: ObservationId
  programId: ProgramId!
  name: NonEmptyString
  asterismId: AsterismId
  targetId: TargetId
  status: ObsStatus
}

# Sidereal target parameters
input CreateSiderealInput {
  targetId: TargetId
  programIds: [ProgramId!]
  name: NonEmptyString!
  catalogId: CatalogIdInput
  ra: RightAscensionInput!
  dec: DeclinationInput!
  epoch: EpochString
  properMotion: ProperMotionInput
  radialVelocity: RadialVelocityInput
  parallax: ParallaxModelInput
  brightnesses: [MagnitudeInput!]
  magnitudes: [MagnitudeInput!] @deprecated(reason: "Use brightnesses instead")
}

# Opaque object cursor
scalar Cursor

# Dark calibration step
type Dark implements StepConfig {
  # Step type
  stepType: StepType!
}

type Declination {
  # Declination in DD:MM:SS.SS format
  dms: DmsString!

  # Declination in signed degrees
  degrees: BigDecimal!

  # Declination in signed µas
  microarcseconds: Long!
}

# Decimal value in Declination
input DeclinationDecimalInput {
  # decimal value in associated units
  value: BigDecimal!

  # units for associated value
  units: DeclinationUnits!
}

# Declination, choose one of the available units
input DeclinationInput {
  microarcseconds: Long
  degrees: BigDecimal
  dms: DmsString
  fromLong: DeclinationLongInput
  fromDecimal: DeclinationDecimalInput
}

# Integral value in Declination
input DeclinationLongInput {
  # integral value in associated units
  value: Long!

  # units for associated value
  units: DeclinationUnits!
}

# Unit options for Declination values
enum DeclinationUnits {
  # DeclinationUnits Microarcseconds
  MICROARCSECONDS

  # DeclinationUnits Degrees
  DEGREES
}

# Target declination coordinate in format '[+/-]DD:MM:SS.sss'
scalar DmsString

type Duration {
  # Duration in µs
  microseconds: Long!

  # Duration in ms
  milliseconds: BigDecimal!

  # Duration in seconds
  seconds: BigDecimal!

  # Duration in minutes
  minutes: BigDecimal!

  # Duration in hours
  hours: BigDecimal!
}

# Asterism edit
input EditAsterismInput {
  asterismId: AsterismId!

  # The existence field must be either specified or skipped altogether.  It cannot be unset with a null value.
  existence: Existence

  # The name field may be unset by assigning a null value, or ignored by skipping it altogether
  name: NonEmptyString

  # The explicitBase field may be unset by assigning a null value, or ignored by skipping it altogether
  explicitBase: CoordinatesInput
}

# Edit constraint set
input EditConstraintSetInput {
  constraintSetId: ConstraintSetId!

  # The existence field must be either specified or skipped altogether.  It cannot be unset with a null value.
  existence: Existence

  # The name field must be either specified or skipped altogether.  It cannot be unset with a null value.
  name: NonEmptyString

  # The imageQuality field must be either specified or skipped altogether.  It cannot be unset with a null value.
  imageQuality: ImageQuality

  # The cloudExtinction field must be either specified or skipped altogether.  It cannot be unset with a null value.
  cloudExtinction: CloudExtinction

  # The skyBackground field must be either specified or skipped altogether.  It cannot be unset with a null value.
  skyBackground: SkyBackground

  # The waterVapor field must be either specified or skipped altogether.  It cannot be unset with a null value.
  waterVapor: WaterVapor

  # The elevationRange field must be either specified or skipped altogether.  It cannot be unset with a null value.
  elevationRange: CreateElevationRangeInput
}

# Edit observation
input EditObservationInput {
  observationId: ObservationId!

  # The existence field must be either specified or skipped altogether.  It cannot be unset with a null value.
  existence: Existence

  # The name field may be unset by assigning a null value, or ignored by skipping it altogether
  name: NonEmptyString

  # The status field must be either specified or skipped altogether.  It cannot be unset with a null value.
  status: ObsStatus

  # The asterismId field may be unset by assigning a null value, or ignored by skipping it altogether
  asterismId: AsterismId

  # The targetId field may be unset by assigning a null value, or ignored by skipping it altogether
  targetId: TargetId
}

# Edit the target or asterism for a set of observations
input EditObservationPointingInput {
  observationIds: [ObservationId!]!
  asterismId: AsterismId
  targetId: TargetId
}

# Sidereal target edit parameters
input EditSiderealInput {
  targetId: TargetId!

  # Replace all magnitudes with the provided values
  magnitudes: [MagnitudeInput!]

  # Update any listed magnitudes leaving unmentioned values unchanged
  modifyMagnitudes: [MagnitudeInput!]

  # Removes any listed magnitude values
  deleteMagnitudes: [MagnitudeBand!]

  # The existence field must be either specified or skipped altogether.  It cannot be unset with a null value.
  existence: Existence

  # The name field must be either specified or skipped altogether.  It cannot be unset with a null value.
  name: String

  # The catalogId field may be unset by assigning a null value, or ignored by skipping it altogether
  catalogId: CatalogIdInput

  # The ra field must be either specified or skipped altogether.  It cannot be unset with a null value.
  ra: RightAscensionInput

  # The dec field must be either specified or skipped altogether.  It cannot be unset with a null value.
  dec: DeclinationInput

  # The epoch field must be either specified or skipped altogether.  It cannot be unset with a null value.
  epoch: EpochString

  # The properMotion field may be unset by assigning a null value, or ignored by skipping it altogether
  properMotion: ProperMotionInput

  # The radialVelocity field may be unset by assigning a null value, or ignored by skipping it altogether
  radialVelocity: RadialVelocityInput

  # The parallax field may be unset by assigning a null value, or ignored by skipping it altogether
  parallax: ParallaxModelInput
}

# Type of edit that triggered an event
enum EditType {
  # EditType Created
  CREATED

  # EditType Updated
  UPDATED
}

# Either airmass range or elevation range
union ElevationRange = AirMassRange | HourAngleRange

# Ephemeris key type options
enum EphemerisKeyType {
  # EphemerisKeyType Comet
  COMET

  # EphemerisKeyType AsteroidNew
  ASTEROID_NEW

  # EphemerisKeyType AsteroidOld
  ASTEROID_OLD @deprecated(reason: "Use ASTEROID_NEW instead")

  # EphemerisKeyType MajorBody
  MAJOR_BODY

  # EphemerisKeyType UserSupplied
  USER_SUPPLIED
}

# Reference observation epoch in format '[JB]YYYY.YYY'
scalar EpochString

# Common fields shared by all events
interface Event {
  id: Long!
}

# State of being: either Deleted or Present
enum Existence {
  # Existence Present
  PRESENT

  # Existence Deleted
  DELETED
}

# GCAL calibration step (flat / arc)
type Gcal implements StepConfig {
  # GCAL continuum, present if no arcs are used
  continuum: GcalContinuum

  # GCAL arcs, one or more present if no continuum is used
  arcs: [GcalArc!]!

  # GCAL filter
  filter: GcalFilter!

  # GCAL diffuser
  diffuser: GcalDiffuser!

  # GCAL shutter
  shutter: GcalShutter!

  # GCAL exposure time
  exposure: Duration!

  # GCAL coadds
  coadds: Int!

  # Step type
  stepType: StepType!
}

# GCAL arc
enum GcalArc {
  # GcalArc ArArc
  AR_ARC

  # GcalArc ThArArc
  TH_AR_ARC

  # GcalArc CuArArc
  CU_AR_ARC

  # GcalArc XeArc
  XE_ARC
}

# GCAL continuum
enum GcalContinuum {
  # GcalContinuum IrGreyBodyLow
  IR_GREY_BODY_LOW

  # GcalContinuum IrGreyBodyHigh
  IR_GREY_BODY_HIGH

  # GcalContinuum QuartzHalogen
  QUARTZ_HALOGEN
}

# GCAL diffuser
enum GcalDiffuser {
  # GcalDiffuser Ir
  IR

  # GcalDiffuser Visible
  VISIBLE
}

# GCAL filter
enum GcalFilter {
  # GcalFilter None
  NONE

  # GcalFilter Gmos
  GMOS

  # GcalFilter Hros
  HROS

  # GcalFilter Nir
  NIR

  # GcalFilter Nd10
  ND10

  # GcalFilter Nd16
  ND16

  # GcalFilter Nd20
  ND20

  # GcalFilter Nd30
  ND30

  # GcalFilter Nd40
  ND40

  # GcalFilter Nd45
  ND45

  # GcalFilter Nd50
  ND50
}

# GCAL shutter
enum GcalShutter {
  # GcalShutter Open
  OPEN

  # GcalShutter Closed
  CLOSED
}

# GMOS amp count
enum GmosAmpCount {
  # GmosAmpCount Three
  THREE

  # GmosAmpCount Six
  SIX

  # GmosAmpCount Twelve
  TWELVE
}

# GMOS amp read mode
enum GmosAmpReadMode {
  # GmosAmpReadMode Slow
  SLOW

  # GmosAmpReadMode Fast
  FAST
}

# CCD Readout Configuration
type GmosCcdMode {
  # GMOS X-binning
  xBin: GmosXBinning!

  # GMOS Y-binning
  yBin: GmosYBinning!

  # GMOS Amp Count
  ampCount: GmosAmpCount!

  # GMOS Amp Gain
  ampGain: GmosAmpCount!

  # GMOS Amp Read Mode
  ampReadMode: GmosAmpReadMode!
}

# GMOS Custom Mask
type GmosCustomMask {
  # Custom Mask Filename
  filename: String!

  # Custom Slit Width
  slitWidth: GmosCustomSlitWidth!
}

# GMOS Custom Slit Width
enum GmosCustomSlitWidth {
  # GmosCustomSlitWidth CustomWidth_0_25
  CUSTOM_WIDTH_0_25

  # GmosCustomSlitWidth CustomWidth_0_50
  CUSTOM_WIDTH_0_50

  # GmosCustomSlitWidth CustomWidth_0_75
  CUSTOM_WIDTH_0_75

  # GmosCustomSlitWidth CustomWidth_1_00
  CUSTOM_WIDTH_1_00

  # GmosCustomSlitWidth CustomWidth_1_50
  CUSTOM_WIDTH_1_50

  # GmosCustomSlitWidth CustomWidth_2_00
  CUSTOM_WIDTH_2_00

  # GmosCustomSlitWidth CustomWidth_5_00
  CUSTOM_WIDTH_5_00
}

# Detector type
enum GmosDetector {
  # GmosDetector E2V
  E2_V

  # GmosDetector HAMAMATSU
  HAMAMATSU
}

# GMOS disperser order
enum GmosDisperserOrder {
  # GmosDisperserOrder Zero
  ZERO

  # GmosDisperserOrder One
  ONE

  # GmosDisperserOrder Two
  TWO
}

# GMOS Detector Translation X Offset
enum GmosDtax {
  # GmosDtax MinusSix
  MINUS_SIX

  # GmosDtax MinusFive
  MINUS_FIVE

  # GmosDtax MinusFour
  MINUS_FOUR

  # GmosDtax MinusThree
  MINUS_THREE

  # GmosDtax MinusTwo
  MINUS_TWO

  # GmosDtax MinusOne
  MINUS_ONE

  # GmosDtax Zero
  ZERO

  # GmosDtax One
  ONE

  # GmosDtax Two
  TWO

  # GmosDtax Three
  THREE

  # GmosDtax Four
  FOUR

  # GmosDtax Five
  FIVE

  # GmosDtax Six
  SIX
}

# Electronic offsetting
enum GmosEOffsetting {
  # GmosEOffsetting On
  ON

  # GmosEOffsetting Off
  OFF
}

# Either custom mask or builtin-FPU
union GmosFpu = GmosCustomMask | GmosNorthBuiltinFpu

type GmosNodAndShuffle {
  # Offset position A
  posA: Offset!

  # Offset position B
  posB: Offset!

  # Whether to use electronic offsetting
  eOffset: GmosEOffsetting!

  # Shuffle offset
  shuffleOffset: Int!

  # Shuffle cycles
  shuffleCycles: Int!
}

# GmosNorth step with potential breakpoint
type GmosNorthBreakpointStep {
  # Whether to pause before the execution of this step
  breakpoint: Breakpoint!

  # The sequence step itself
  step: GmosNorthStep!
}

# GMOS North builtin-in FPU
type GmosNorthBuiltinFpu {
  # GMOS North builtin-fpu
  builtin: GmosNorthFpu!
}

# GMOS North Configuration
type GmosNorthConfig implements Config {
  # GMOS North manual sequence configuration
  manual: GmosNorthSequence!

  # Instrument type
  instrument: InstrumentType!
}

# GMOS North Disperser
enum GmosNorthDisperser {
  # GmosNorthDisperser B1200_G5301
  B1200_G5301

  # GmosNorthDisperser R831_G5302
  R831_G5302

  # GmosNorthDisperser B600_G5303
  B600_G5303

  # GmosNorthDisperser B600_G5307
  B600_G5307

  # GmosNorthDisperser R600_G5304
  R600_G5304

  # GmosNorthDisperser R400_G5305
  R400_G5305

  # GmosNorthDisperser R150_G5306
  R150_G5306

  # GmosNorthDisperser R150_G5308
  R150_G5308
}

# GMOS North dynamic step configuration
type GmosNorthDynamic {
  # GMOS exposure time
  exposure: Duration!

  # GMOS CCD Readout
  readout: GmosCcdMode!

  # GMOS detector x offset
  dtax: GmosDtax!

  # GMOS region of interest
  roi: GmosRoi!

  # GMOS North grating
  grating: GmosNorthGrating

  # GMOS North filter
  filter: GmosNorthFilter

  # GMOS North FPU
  fpu: GmosFpu
}

# GMOS North Filter
enum GmosNorthFilter {
  # GmosNorthFilter GPrime
  G_PRIME

  # GmosNorthFilter RPrime
  R_PRIME

  # GmosNorthFilter IPrime
  I_PRIME

  # GmosNorthFilter ZPrime
  Z_PRIME

  # GmosNorthFilter Z
  Z

  # GmosNorthFilter Y
  Y

  # GmosNorthFilter GG455
  GG455

  # GmosNorthFilter OG515
  OG515

  # GmosNorthFilter RG610
  RG610

  # GmosNorthFilter CaT
  CA_T

  # GmosNorthFilter Ha
  HA

  # GmosNorthFilter HaC
  HA_C

  # GmosNorthFilter DS920
  DS920

  # GmosNorthFilter SII
  SII

  # GmosNorthFilter OIII
  OIII

  # GmosNorthFilter OIIIC
  OIIIC

  # GmosNorthFilter HeII
  HE_II

  # GmosNorthFilter HeIIC
  HE_IIC

  # GmosNorthFilter HartmannA_RPrime
  HARTMANN_A_R_PRIME

  # GmosNorthFilter HartmannB_RPrime
  HARTMANN_B_R_PRIME

  # GmosNorthFilter GPrime_GG455
  G_PRIME_GG455

  # GmosNorthFilter GPrime_OG515
  G_PRIME_OG515

  # GmosNorthFilter RPrime_RG610
  R_PRIME_RG610

  # GmosNorthFilter IPrime_CaT
  I_PRIME_CA_T

  # GmosNorthFilter ZPrime_CaT
  Z_PRIME_CA_T

  # GmosNorthFilter UPrime
  U_PRIME
}

# GMOS North FPU
enum GmosNorthFpu {
  # GmosNorthFpu Ns0
  NS0

  # GmosNorthFpu Ns1
  NS1

  # GmosNorthFpu Ns2
  NS2

  # GmosNorthFpu Ns3
  NS3

  # GmosNorthFpu Ns4
  NS4

  # GmosNorthFpu Ns5
  NS5

  # GmosNorthFpu LongSlit_0_25
  LONG_SLIT_0_25

  # GmosNorthFpu LongSlit_0_50
  LONG_SLIT_0_50

  # GmosNorthFpu LongSlit_0_75
  LONG_SLIT_0_75

  # GmosNorthFpu LongSlit_1_00
  LONG_SLIT_1_00

  # GmosNorthFpu LongSlit_1_50
  LONG_SLIT_1_50

  # GmosNorthFpu LongSlit_2_00
  LONG_SLIT_2_00

  # GmosNorthFpu LongSlit_5_00
  LONG_SLIT_5_00

  # GmosNorthFpu Ifu1
  IFU1

  # GmosNorthFpu Ifu2
  IFU2

  # GmosNorthFpu Ifu3
  IFU3
}

# GMOS North Grating
type GmosNorthGrating {
  # GMOS North Disperser
  disperser: GmosNorthDisperser!

  # GMOS disperser order
  order: GmosDisperserOrder!

  # Grating wavelength
  wavelength: Wavelength!
}

# Instrument sequence
type GmosNorthSequence {
  # Static/unchanging configuration
  static: GmosNorthStaticConfig!

  # Acquisition sequence. Each inner list of steps comprise an unsplittable scheduling unit.
  acquisition: [[GmosNorthBreakpointStep!]!]!

  # Science sequence. Each inner list of steps comprise an unsplittable scheduling unit.
  science: [[GmosNorthBreakpointStep!]!]!
}

# GMOS North stage mode
enum GmosNorthStageMode {
  # GmosNorthStageMode NoFollow
  NO_FOLLOW

  # GmosNorthStageMode FollowXyz
  FOLLOW_XYZ

  # GmosNorthStageMode FollowXy
  FOLLOW_XY

  # GmosNorthStageMode FollowZ
  FOLLOW_Z
}

# Unchanging (over the course of the sequence) configuration values
type GmosNorthStaticConfig {
  # Stage mode
  stageMode: GmosNorthStageMode!

  # Detector in use (always HAMAMATSU for recent and new observations)
  detector: GmosDetector!

  # Is MOS Pre-Imaging Observation
  mosPreImaging: MosPreImaging!

  # Nod-and-shuffle configuration
  nodAndShuffle: GmosNodAndShuffle
}

# Step (bias, dark, science, etc.)
type GmosNorthStep {
  # Step type
  stepType: StepType!

  # Instrument configuration
  instrumentConfig: GmosNorthDynamic!

  # Step configuration
  stepConfig: StepConfig!
}

# GMOS Region Of Interest
enum GmosRoi {
  # GmosRoi FullFrame
  FULL_FRAME

  # GmosRoi Ccd2
  CCD2

  # GmosRoi CentralSpectrum
  CENTRAL_SPECTRUM

  # GmosRoi CentralStamp
  CENTRAL_STAMP

  # GmosRoi TopSpectrum
  TOP_SPECTRUM

  # GmosRoi BottomSpectrum
  BOTTOM_SPECTRUM

  # GmosRoi Custom
  CUSTOM
}

# GmosSouth step with potential breakpoint
type GmosSouthBreakpointStep {
  # Whether to pause before the execution of this step
  breakpoint: Breakpoint!

  # The sequence step itself
  step: GmosSouthStep!
}

# GMOS South Configuration
type GmosSouthConfig implements Config {
  # GMOS South manual sequence configuration
  manual: GmosSouthSequence!

  # Instrument type
  instrument: InstrumentType!
}

# GMOS South Disperser
enum GmosSouthDisperser {
  # GmosSouthDisperser B1200_G5321
  B1200_G5321

  # GmosSouthDisperser R831_G5322
  R831_G5322

  # GmosSouthDisperser B600_G5323
  B600_G5323

  # GmosSouthDisperser R600_G5324
  R600_G5324

  # GmosSouthDisperser R400_G5325
  R400_G5325

  # GmosSouthDisperser R150_G5326
  R150_G5326
}

# GMOS South dynamic step configuration
type GmosSouthDynamic {
  # GMOS exposure time
  exposure: Duration!

  # GMOS CCD Readout
  readout: GmosCcdMode!

  # GMOS detector x offset
  dtax: GmosDtax!

  # GMOS region of interest
  roi: GmosRoi!

  # GMOS South grating
  grating: GmosSouthGrating

  # GMOS South filter
  filter: GmosSouthFilter

  # GMOS South FPU
  fpu: GmosFpu
}

# GMOS South Filter
enum GmosSouthFilter {
  # GmosSouthFilter UPrime
  U_PRIME

  # GmosSouthFilter GPrime
  G_PRIME

  # GmosSouthFilter RPrime
  R_PRIME

  # GmosSouthFilter IPrime
  I_PRIME

  # GmosSouthFilter ZPrime
  Z_PRIME

  # GmosSouthFilter Z
  Z

  # GmosSouthFilter Y
  Y

  # GmosSouthFilter GG455
  GG455

  # GmosSouthFilter OG515
  OG515

  # GmosSouthFilter RG610
  RG610

  # GmosSouthFilter RG780
  RG780

  # GmosSouthFilter CaT
  CA_T

  # GmosSouthFilter HartmannA_RPrime
  HARTMANN_A_R_PRIME

  # GmosSouthFilter HartmannB_RPrime
  HARTMANN_B_R_PRIME

  # GmosSouthFilter GPrime_GG455
  G_PRIME_GG455

  # GmosSouthFilter GPrime_OG515
  G_PRIME_OG515

  # GmosSouthFilter RPrime_RG610
  R_PRIME_RG610

  # GmosSouthFilter IPrime_RG780
  I_PRIME_RG780

  # GmosSouthFilter IPrime_CaT
  I_PRIME_CA_T

  # GmosSouthFilter ZPrime_CaT
  Z_PRIME_CA_T

  # GmosSouthFilter Ha
  HA

  # GmosSouthFilter SII
  SII

  # GmosSouthFilter HaC
  HA_C

  # GmosSouthFilter OIII
  OIII

  # GmosSouthFilter OIIIC
  OIIIC

  # GmosSouthFilter HeII
  HE_II

  # GmosSouthFilter HeIIC
  HE_IIC

  # GmosSouthFilter Lya395
  LYA395
}

# GMOS South Grating
type GmosSouthGrating {
  # GMOS South Disperser
  disperser: GmosSouthDisperser!

  # GMOS disperser order
  order: GmosDisperserOrder!

  # Grating wavelength
  wavelength: Wavelength!
}

# Instrument sequence
type GmosSouthSequence {
  # Static/unchanging configuration
  static: GmosSouthStaticConfig!

  # Acquisition sequence. Each inner list of steps comprise an unsplittable scheduling unit.
  acquisition: [[GmosSouthBreakpointStep!]!]!

  # Science sequence. Each inner list of steps comprise an unsplittable scheduling unit.
  science: [[GmosSouthBreakpointStep!]!]!
}

# GMOS South stage mode
enum GmosSouthStageMode {
  # GmosSouthStageMode NoFollow
  NO_FOLLOW

  # GmosSouthStageMode FollowXyz
  FOLLOW_XYZ

  # GmosSouthStageMode FollowXy
  FOLLOW_XY

  # GmosSouthStageMode FollowZ
  FOLLOW_Z
}

# Unchanging (over the course of the sequence) configuration values
type GmosSouthStaticConfig {
  # Stage mode
  stageMode: GmosSouthStageMode!

  # Detector in use (always HAMAMATSU for recent and new observations)
  detector: GmosDetector!

  # Is MOS Pre-Imaging Observation
  mosPreImaging: MosPreImaging!

  # Nod-and-shuffle configuration
  nodAndShuffle: GmosNodAndShuffle
}

# Step (bias, dark, science, etc.)
type GmosSouthStep {
  # Step type
  stepType: StepType!

  # Instrument configuration
  instrumentConfig: GmosSouthDynamic!

  # Step configuration
  stepConfig: StepConfig!
}

# GMOS X Binning
enum GmosXBinning {
  # GmosXBinning One
  ONE

  # GmosXBinning Two
  TWO

  # GmosXBinning Four
  FOUR
}

# GMOS Y Binning
enum GmosYBinning {
  # GmosYBinning One
  ONE

  # GmosYBinning Two
  TWO

  # GmosYBinning Four
  FOUR
}

# Target right ascension coordinate in format 'HH:MM:SS.sss'
scalar HmsString

type HourAngleRange {
  # Minimum Hour Angle (hours)
  minHours: BigDecimal!

  # Maximum Hour Angle (hours)
  maxHours: BigDecimal!
}

# Image quality
enum ImageQuality {
  # ImageQuality PointOne
  POINT_ONE

  # ImageQuality PointTwo
  POINT_TWO

  # ImageQuality PointThree
  POINT_THREE

  # ImageQuality PointFour
  POINT_FOUR

  # ImageQuality PointSix
  POINT_SIX

  # ImageQuality PointEight
  POINT_EIGHT

  # ImageQuality OnePointZero
  ONE_POINT_ZERO

  # ImageQuality OnePointFive
  ONE_POINT_FIVE

  # ImageQuality TwoPointZero
  TWO_POINT_ZERO
}

# Instrument
enum InstrumentType {
  # InstrumentType Phoenix
  PHOENIX

  # InstrumentType Michelle
  MICHELLE

  # InstrumentType Gnirs
  GNIRS

  # InstrumentType Niri
  NIRI

  # InstrumentType Trecs
  TRECS

  # InstrumentType Nici
  NICI

  # InstrumentType Nifs
  NIFS

  # InstrumentType Gpi
  GPI

  # InstrumentType Gsaoi
  GSAOI

  # InstrumentType GmosS
  GMOS_S

  # InstrumentType AcqCam
  ACQ_CAM

  # InstrumentType GmosN
  GMOS_N

  # InstrumentType Bhros
  BHROS

  # InstrumentType Visitor
  VISITOR

  # InstrumentType Flamingos2
  FLAMINGOS2

  # InstrumentType Ghost
  GHOST
}

# The `Long` scalar type represents non-fractional signed whole numeric values.
# Long can represent values between -(2^63) and 2^63 - 1.
scalar Long

type Magnitude {
  # Magnitude value (unitless)
  value: BigDecimal!

  # Magnitude band
  band: MagnitudeBand!

  # Magnitude System
  system: MagnitudeSystem!
}

# Magnitude band
enum MagnitudeBand {
  # MagnitudeBand SloanU
  SLOAN_U

  # MagnitudeBand SloanG
  SLOAN_G

  # MagnitudeBand SloanR
  SLOAN_R

  # MagnitudeBand SloanI
  SLOAN_I

  # MagnitudeBand SloanZ
  SLOAN_Z

  # MagnitudeBand U
  U

  # MagnitudeBand B
  B

  # MagnitudeBand V
  V

  # MagnitudeBand Uc
  UC

  # MagnitudeBand R
  R

  # MagnitudeBand I
  I

  # MagnitudeBand Y
  Y

  # MagnitudeBand J
  J

  # MagnitudeBand H
  H

  # MagnitudeBand K
  K

  # MagnitudeBand L
  L

  # MagnitudeBand M
  M

  # MagnitudeBand N
  N

  # MagnitudeBand Q
  Q

  # MagnitudeBand Ap
  AP
}

# Magnitude description
input MagnitudeInput {
  value: BigDecimal!
  band: MagnitudeBand!
  error: BigDecimal
  system: MagnitudeSystem = VEGA
}

# Magnitude system
enum MagnitudeSystem {
  # MagnitudeSystem Vega
  VEGA

  # MagnitudeSystem AB
  AB

  # MagnitudeSystem Jy
  JY
}

# MOS pre-imaging observation
enum MosPreImaging {
  # MosPreImaging IsMosPreImaging
  IS_MOS_PRE_IMAGING

  # MosPreImaging IsNotMosPreImaging
  IS_NOT_MOS_PRE_IMAGING
}

type Mutation {
  createAsterism(
    # Asterism description
    input: CreateAsterismInput!
  ): Asterism
  updateAsterism(
    # Edit default asterism
    input: EditAsterismInput!
  ): Asterism!
  deleteAsterism(
    # Asterism ID
    asterismId: AsterismId!
  ): Asterism!
  undeleteAsterism(
    # Asterism ID
    asterismId: AsterismId!
  ): Asterism!
  createConstraintSet(
    # Constraint set description
    input: CreateConstraintSetInput!
  ): ConstraintSet
  updateConstraintSet(
    # Edit constraint set
    input: EditConstraintSetInput!
  ): ConstraintSet!
  deleteConstraintSet(
    # Constraint Set ID
    constraintSetId: ConstraintSetId!
  ): ConstraintSet!
  undeleteContraintSet(
    # Constraint Set ID
    constraintSetId: ConstraintSetId!
  ): ConstraintSet!
  createObservation(
    # Observation description
    input: CreateObservationInput!
  ): Observation
  updateObservation(
    # Edit observation
    input: EditObservationInput!
  ): Observation!
  updatePointing(
    # Edit observation asterism / target
    input: EditObservationPointingInput!
  ): [Observation!]!
  deleteObservation(
    # Observation ID
    observationId: ObservationId!
  ): Observation!
  undeleteObservation(
    # Observation ID
    observationId: ObservationId!
  ): Observation!
  unsetConstraintSet(
    # Observation ID
    observationId: ObservationId!
  ): Observation!
  createNonsiderealTarget(
    # Nonsidereal target description
    input: CreateNonsiderealInput!
  ): Target
  createSiderealTarget(
    # Sidereal target description
    input: CreateSiderealInput!
  ): Target
  updateSiderealTarget(
    # Sidereal target edit
    input: EditSiderealInput!
  ): Target!
  deleteTarget(
    # Target ID
    targetId: TargetId!
  ): Target!
  undeleteTarget(
    # Target ID
    targetId: TargetId!
  ): Target!
  shareAsterismWithPrograms(
    # Asterism / program links
    input: AsterismProgramLinks!
  ): Asterism!
  unshareAsterismWithPrograms(
    # Asterism / program links
    input: AsterismProgramLinks!
  ): Asterism!
  shareAsterismWithTargets(
    # Asterism / target links
    input: AsterismTargetLinks!
  ): Asterism!
  unshareAsterismWithTargets(
    # Asterism / target links
    input: AsterismTargetLinks!
  ): Asterism!
  shareTargetWithAsterisms(
    # Target / asterism links
    input: TargetAsterismLinks!
  ): Target!
  unshareTargetWithAsterisms(
    # Target / asterism links
    input: TargetAsterismLinks!
  ): Target!
  shareTargetWithPrograms(
    # Target / program links
    input: TargetProgramLinks!
  ): Target!
  unshareTargetWithPrograms(
    # Target / program links
    input: TargetProgramLinks!
  ): Target!
  shareConstraintSetWithObservations(
    # ConstraintSet / observation links
    input: ConstraintSetObservationLinks!
  ): ConstraintSet!
  unshareConstraintSetWithObservations(
    # ConstraintSet / observation links
    input: ConstraintSetObservationLinks!
  ): ConstraintSet!
}

# A String value that cannot be empty
scalar NonEmptyString

type Nonsidereal {
  # Human readable designation that discriminates among ephemeris keys of the same type.
  des: String!

  # Nonsidereal target lookup type.
  keyType: EphemerisKeyType!
}

type Observation {
  # Observation ID
  id: ObservationId!

  # Deleted or Present
  existence: Existence!

  # Observation name
  name: NonEmptyString

  # Observation status
  status: ObsStatus!

  # Observation planned time calculation.
  plannedTime: PlannedTimeSummary!

  # The program that contains this observation
  program(
    # Set to true to include deleted values
    includeDeleted: Boolean! = false
  ): Program!

  # The constraint set for the observation, if any
  constraintSet(
    # Set to true to include deleted values
    includeDeleted: Boolean! = false
  ): ConstraintSet

  # The observation's asterism or target (see also `asterism` and `target` fields)
  observationTarget(
    # Set to true to include deleted values
    includeDeleted: Boolean! = false
  ): ObservationTarget

  # The observation's asterism, if a multi-target observation
  asterism(
    # Set to true to include deleted values
    includeDeleted: Boolean! = false
  ): Asterism

  # The observation's target, if a single-target observation
  target(
    # Set to true to include deleted values
    includeDeleted: Boolean! = false
  ): Target

  # Instrument configuration
  config: Config
}

# Matching observations
type ObservationConnection {
  nodes: [Observation!]!

  # Edges in the current page
  edges: [ObservationEdge!]!

  # Paging information
  pageInfo: PageInfo!
}

# An observation and its cursor
type ObservationEdge {
  # ObservationEdge element
  node: Observation!

  # ObservationEdge element cursor
  cursor: Cursor!
}

# Event sent when a new object is created or updated
type ObservationEdit implements Event {
  # Type of edit
  editType: EditType!

  # Edited object
  value: Observation!
  id: Long!
}

# ObservationId id formatted as `o-(0|[1-9a-f][0-9a-f]*)`
scalar ObservationId

# Either asterism or target
union ObservationTarget = Asterism | Target

# Observation status options
enum ObsStatus {
  # ObsStatus New
  NEW

  # ObsStatus Included
  INCLUDED

  # ObsStatus Proposed
  PROPOSED

  # ObsStatus Approved
  APPROVED

  # ObsStatus ForReview
  FOR_REVIEW

  # ObsStatus Ready
  READY

  # ObsStatus Ongoing
  ONGOING

  # ObsStatus Observed
  OBSERVED
}

type Offset {
  # Offset in p
  p: p!

  # Offset in q
  q: q!
}

type p {
  # p offset in µas
  microarcseconds: Long!

  # p offset in mas
  milliarcseconds: BigDecimal!

  # p offset in arcsec
  arcseconds: BigDecimal!
}

# Information that supports paging through a list of elements
type PageInfo {
  # Cursor pointing to the first element in the result set, if any
  startCursor: Cursor

  # Cursor pointing to the last element in the result set, if any
  endCursor: Cursor

  # Whether there are any pages left to retrieve
  hasNextPage: Boolean!
}

type Parallax {
  # Parallax in microarcseconds
  microarcseconds: Long!

  # Parallax in milliarcseconds
  milliarcseconds: BigDecimal!
}

# Decimal value in Parallax
input ParallaxDecimalInput {
  # decimal value in associated units
  value: BigDecimal!

  # units for associated value
  units: ParallaxUnits!
}

# Integral value in Parallax
input ParallaxLongInput {
  # integral value in associated units
  value: Long!

  # units for associated value
  units: ParallaxUnits!
}

# Parallax, choose one of the available units
input ParallaxModelInput {
  microarcseconds: Long
  milliarcseconds: BigDecimal
  fromLong: ParallaxLongInput
  fromDecimal: ParallaxDecimalInput
}

# Unit options for parallax values
enum ParallaxUnits {
  # ParallaxUnits Microarcseconds
  MICROARCSECONDS

  # ParallaxUnits Milliarcseconds
  MILLIARCSECONDS
}

type PlannedTimeSummary {
  # The portion of planned time that will be charged
  pi: Duration!

  # The portion of planned time that will not be charged
  uncharged: Duration!

  # The total estimated execution time
  execution: Duration!
}

type Program {
  # Program ID
  id: ProgramId!

  # Deleted or Present
  existence: Existence!

  # Program name
  name: NonEmptyString

  # All asterisms associated with the program (needs pagination).
  asterisms(
    # Retrieve `first` values after the given cursor
    first: Int!

    # Retrieve values after the one associated with this cursor
    after: Cursor

    # Set to true to include deleted values
    includeDeleted: Boolean! = false
  ): AsterismConnection!

  # All observations associated with the program (needs pagination).
  observations(
    # Retrieve `first` values after the given cursor
    first: Int!

    # Retrieve values after the one associated with this cursor
    after: Cursor

    # Set to true to include deleted values
    includeDeleted: Boolean! = false
  ): ObservationConnection!

  # All targets associated with the program (needs pagination).
  targets(
    # Retrieve `first` values after the given cursor
    first: Int!

    # Retrieve values after the one associated with this cursor
    after: Cursor

    # Set to true to include deleted values
    includeDeleted: Boolean! = false
  ): TargetConnection!

  # Program planned time calculation.
  plannedTime(
    # Set to true to include deleted values
    includeDeleted: Boolean! = false
  ): PlannedTimeSummary!
}

# Programs in the current page
type ProgramConnection {
  nodes: [Program!]!

  # Edges in the current page
  edges: [ProgramEdge!]!

  # Paging information
  pageInfo: PageInfo!
}

# A Program node and its cursor
type ProgramEdge {
  # ProgramEdge element
  node: Program!

  # ProgramEdge element cursor
  cursor: Cursor!
}

# Event sent when a new object is created or updated
type ProgramEdit implements Event {
  # Type of edit
  editType: EditType!

  # Edited object
  value: Program!
  id: Long!
}

# ProgramId id formatted as `p-(0|[1-9a-f][0-9a-f]*)`
scalar ProgramId

type ProperMotion {
  # Proper motion in RA
  ra: ProperMotionRA!

  # Proper motion in declination
  dec: ProperMotionDeclination!
}

# Decimal value in ProperMotionComponent
input ProperMotionComponentDecimalInput {
  # decimal value in associated units
  value: BigDecimal!

  # units for associated value
  units: ProperMotionComponentUnits!
}

# Proper motion component, choose one of the available units
input ProperMotionComponentInput {
  microarcsecondsPerYear: Long
  milliarcsecondsPerYear: BigDecimal
  fromLong: ProperMotionComponentLongInput
  fromDecimal: ProperMotionComponentDecimalInput
}

# Integral value in ProperMotionComponent
input ProperMotionComponentLongInput {
  # integral value in associated units
  value: Long!

  # units for associated value
  units: ProperMotionComponentUnits!
}

# Unit options for proper motion components (RA and Dec)
enum ProperMotionComponentUnits {
  # ProperMotionComponentUnits MicroarcsecondsPerYear
  MICROARCSECONDS_PER_YEAR

  # ProperMotionComponentUnits MilliarcsecondsPerYear
  MILLIARCSECONDS_PER_YEAR
}

type ProperMotionDeclination {
  # Proper motion in properMotion μas/year
  microarcsecondsPerYear: Long!

  # Proper motion in properMotion mas/year
  milliarcsecondsPerYear: BigDecimal!
}

# Proper motion, choose one of the available units
input ProperMotionInput {
  ra: ProperMotionComponentInput!
  dec: ProperMotionComponentInput!
}

type ProperMotionRA {
  # Proper motion in properMotion μas/year
  microarcsecondsPerYear: Long!

  # Proper motion in properMotion mas/year
  milliarcsecondsPerYear: BigDecimal!
}

type q {
  # q offset in µas
  microarcseconds: Long!

  # q offset in mas
  milliarcseconds: BigDecimal!

  # q offset in arcsec
  arcseconds: BigDecimal!
}

type Query {
  # Returns all asterisms associated with the given program.
  asterisms(
    # Program ID
    programId: ProgramId!

    # Retrieve `first` values after the given cursor
    first: Int!

    # Retrieve values after the one associated with this cursor
    after: Cursor

    # Set to true to include deleted values
    includeDeleted: Boolean! = false
  ): AsterismConnection!

  # Returns the asterism with the given id, if any.
  asterism(
    # Asterism ID
    asterismId: AsterismId!

    # Set to true to include deleted values
    includeDeleted: Boolean! = false
  ): Asterism

  # Returns all constraint sets associated with the given program.
  constraintSets(
    # Program ID
    programId: ProgramId!

    # Retrieve `first` values after the given cursor
    first: Int!

    # Retrieve values after the one associated with this cursor
    after: Cursor

    # Set to true to include deleted values
    includeDeleted: Boolean! = false
  ): ConstraintSetConnection!

  # Returns the constraint set with the given id, if any.
  constraintSet(
    # Constraint Set ID
    constraintSetId: ConstraintSetId!

    # Set to true to include deleted values
    includeDeleted: Boolean! = false
  ): ConstraintSet

  # Returns all observations associated with the given program.
  observations(
    # Program ID
    programId: ProgramId!

    # Retrieve `first` values after the given cursor
    first: Int!

    # Retrieve values after the one associated with this cursor
    after: Cursor

    # Set to true to include deleted values
    includeDeleted: Boolean! = false
  ): ObservationConnection!

  # Returns the observation with the given id, if any.
  observation(
    # Observation ID
    observationId: ObservationId!

    # Set to true to include deleted values
    includeDeleted: Boolean! = false
  ): Observation

  # Pages through all programs.
  programs(
    # Retrieve `first` values after the given cursor
    first: Int!

    # Retrieve values after the one associated with this cursor
    after: Cursor

    # Set to true to include deleted values
    includeDeleted: Boolean! = false
  ): ProgramConnection!

  # Returns the program with the given id, if any.
  program(
    # Program ID
    programId: ProgramId!

    # Set to true to include deleted values
    includeDeleted: Boolean! = false
  ): Program

  # Return all targets associated with the given program.
  targets(
    # Program ID
    programId: ProgramId!

    # Retrieve `first` values after the given cursor
    first: Int!

    # Retrieve values after the one associated with this cursor
    after: Cursor

    # Set to true to include deleted values
    includeDeleted: Boolean! = false
  ): TargetConnection!

  # Returns the target with the given id, if any.
  target(
    # Target ID
    targetId: TargetId!

    # Set to true to include deleted values
    includeDeleted: Boolean! = false
  ): Target
}

type RadialVelocity {
  # Radial velocity in cm/s
  centimetersPerSecond: Long!

  # Radial velocity in m/s
  metersPerSecond: BigDecimal!

  # Radial velocity in km/s
  kilometersPerSecond: BigDecimal!
}

# Decimal value in RadialVelocity
input RadialVelocityDecimalInput {
  # decimal value in associated units
  value: BigDecimal!

  # units for associated value
  units: RadialVelocityUnits!
}

# Radial velocity, choose one of the available units
input RadialVelocityInput {
  centimetersPerSecond: Long
  metersPerSecond: BigDecimal
  kilometersPerSecond: BigDecimal
  fromLong: RadialVelocityLongInput
  fromDecimal: RadialVelocityDecimalInput
}

# Integral value in RadialVelocity
input RadialVelocityLongInput {
  # integral value in associated units
  value: Long!

  # units for associated value
  units: RadialVelocityUnits!
}

# Unit options for radial velocity values
enum RadialVelocityUnits {
  # RadialVelocityUnits CentimetersPerSecond
  CENTIMETERS_PER_SECOND

  # RadialVelocityUnits MetersPerSecond
  METERS_PER_SECOND

  # RadialVelocityUnits KilometersPerSecond
  KILOMETERS_PER_SECOND
}

type RightAscension {
  # Right Ascension (RA) in HH:MM:SS.SSS format
  hms: HmsString!

  # Right Ascension (RA) in hours
  hours: BigDecimal!

  # Right Ascension (RA) in degrees
  degrees: BigDecimal!

  # Right Ascension (RA) in µas
  microarcseconds: Long!
}

# Decimal value in RightAscension
input RightAscensionDecimalInput {
  # decimal value in associated units
  value: BigDecimal!

  # units for associated value
  units: RightAscensionUnits!
}

# Right Ascension, choose one of the available units
input RightAscensionInput {
  microarcseconds: Long
  degrees: BigDecimal
  hours: BigDecimal
  hms: HmsString
  fromLong: RightAscensionLongInput
  fromDecimal: RightAscensionDecimalInput
}

# Integral value in RightAscension
input RightAscensionLongInput {
  # integral value in associated units
  value: Long!

  # units for associated value
  units: RightAscensionUnits!
}

# Unit options for RightAscension values
enum RightAscensionUnits {
  # RightAscensionUnits Microarcseconds
  MICROARCSECONDS

  # RightAscensionUnits Degrees
  DEGREES

  # RightAscensionUnits Hours
  HOURS
}

# Science step
type Science implements StepConfig {
  # Offset
  offset: Offset!

  # Step type
  stepType: StepType!
}

type Sidereal {
  # Catalog id, if any, describing from where the information in this target was obtained
  catalogId: CatalogId

  # Coordinates at epoch
  coordinates: Coordinates!

  # Epoch, time of base observation
  epoch: EpochString!

  # Proper motion per year in right ascension and declination
  properMotion: ProperMotion

  # Radial velocity
  radialVelocity: RadialVelocity

  # Parallax
  parallax: Parallax
}

# Sky background
enum SkyBackground {
  # SkyBackground Darkest
  DARKEST

  # SkyBackground Dark
  DARK

  # SkyBackground Gray
  GRAY

  # SkyBackground Bright
  BRIGHT
}

# Step (bias, dark, science, etc.)
interface StepConfig {
  # Step type
  stepType: StepType!
}

# Step type
enum StepType {
  # StepType Bias
  BIAS

  # StepType Dark
  DARK

  # StepType Gcal
  GCAL

  # StepType Science
  SCIENCE

  # StepType SmartGcal
  SMART_GCAL
}

type Subscription {
  #
  # Subscribes to an event that is generated whenever a(n) asterism is
  # created or updated.  If a(n) asterism id is provided, the event is only
  # generated for edits to that particular asterism.  If a program id is
  # provided then the event must correspond to a(n) asterism referenced by
  # that program.
  #
  asterismEdit(
    # Asterism ID
    asterismId: AsterismId

    # Program ID
    programId: ProgramId
  ): AsterismEdit!

  #
  # Subscribes to an event that is generated whenever a(n) constraintSet is
  # created or updated.  If a(n) constraintSet id is provided, the event is only
  # generated for edits to that particular constraintSet.  If a program id is
  # provided then the event must correspond to a(n) constraintSet referenced by
  # that program.
  #
  constraintSetEdit(
    # Constraint Set ID
    constraintSetId: ConstraintSetId

    # Program ID
    programId: ProgramId
  ): ConstraintSetEdit!

  #
  # Subscribes to an event that is generated whenever a(n) observation is
  # created or updated.  If a(n) observation id is provided, the event is only
  # generated for edits to that particular observation.  If a program id is
  # provided then the event must correspond to a(n) observation referenced by
  # that program.
  #
  observationEdit(
    # Observation ID
    observationId: ObservationId

    # Program ID
    programId: ProgramId
  ): ObservationEdit!

  #
  # Subscribes to an event that is generated whenever a program is created
  # or edited. A particular program id may be provided to limit events to
  # that program.
  #
  programEdit(
    # Program ID
    programId: ProgramId
  ): ProgramEdit!

  #
  # Subscribes to an event that is generated whenever a(n) target is
  # created or updated.  If a(n) target id is provided, the event is only
  # generated for edits to that particular target.  If a program id is
  # provided then the event must correspond to a(n) target referenced by
  # that program.
  #
  targetEdit(
    # Target ID
    targetId: TargetId

    # Program ID
    programId: ProgramId
  ): TargetEdit!
}

type Target {
  # Target id.
  id: TargetId!

  # Deleted or Present
  existence: Existence!

  # The asterisms associated with the target.
  asterisms(
    # Program ID
    programId: ProgramId

    # Retrieve `first` values after the given cursor
    first: Int!

    # Retrieve values after the one associated with this cursor
    after: Cursor

    # Set to true to include deleted values
    includeDeleted: Boolean! = false
  ): AsterismConnection!

  # The observations associated with the target.
  observations(
    # Program ID
    programId: ProgramId

    # Retrieve `first` values after the given cursor
    first: Int!

    # Retrieve values after the one associated with this cursor
    after: Cursor

    # Set to true to include deleted values
    includeDeleted: Boolean! = false
  ): ObservationConnection!

  # The programs associated with the target.
  programs(
    # Retrieve `first` values after the given cursor
    first: Int!

    # Retrieve values after the one associated with this cursor
    after: Cursor

    # Set to true to include deleted values
    includeDeleted: Boolean! = false
  ): ProgramConnection!

  # Target name.
  name: NonEmptyString!

  # Information required to find a target in the sky.
  tracking: Tracking!

  # Target magnitudes
  magnitudes: [Magnitude!]!
}

# Target and the asterisms with which it is associated
input TargetAsterismLinks {
  targetId: TargetId!
  asterismIds: [AsterismId!]!
}

# Targets in the current page
type TargetConnection {
  nodes: [Target!]!

  # Edges in the current page
  edges: [TargetEdge!]!

  # Paging information
  pageInfo: PageInfo!
}

# A Target and its cursor
type TargetEdge {
  # TargetEdge element
  node: Target!

  # TargetEdge element cursor
  cursor: Cursor!
}

# Event sent when a new object is created or updated
type TargetEdit implements Event {
  # Type of edit
  editType: EditType!

  # Edited object
  value: Target!
  id: Long!
}

# TargetId id formatted as `t-(0|[1-9a-f][0-9a-f]*)`
scalar TargetId

# Target and the programs with which it is associated
input TargetProgramLinks {
  targetId: TargetId!
  programIds: [ProgramId!]!
}

# Either Nonsidereal ephemeris lookup key or Sidereal proper motion.
union Tracking = Nonsidereal | Sidereal

# Water vapor
enum WaterVapor {
  # WaterVapor VeryDry
  VERY_DRY

  # WaterVapor Dry
  DRY

  # WaterVapor Median
  MEDIAN

  # WaterVapor Wet
  WET
}

type Wavelength {
  # Wavelength in pm
  picometers: Int!

  # Wavelength in Å
  angstroms: BigDecimal!

  # Wavelength in nm
  nanometers: BigDecimal!

  # Wavelength in µm
  micrometers: BigDecimal!
}

